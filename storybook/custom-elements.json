{
  "version": "experimental",
  "tags": [
    {
      "name": "fwc-avatar",
      "path": "./../packages/avatar/src/index.ts"
    },
    {
      "name": "fwc-button",
      "path": "./../packages/button/src/index.ts",
      "description": "dsadsad",
      "attributes": [
        {
          "name": "color",
          "description": "test commment",
          "type": "ButtonColor",
          "default": "\"primary\""
        },
        {
          "name": "variant",
          "type": "ButtonVariant",
          "default": "\"contained\""
        },
        {
          "name": "icon",
          "type": "string",
          "default": "\"\""
        }
      ],
      "properties": [
        {
          "name": "styles",
          "type": "CSSResult[]",
          "default": "[\"mdcStyle\",\"style\"]"
        },
        {
          "name": "color",
          "attribute": "color",
          "description": "test commment",
          "type": "ButtonColor",
          "default": "\"primary\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "type": "ButtonVariant",
          "default": "\"contained\""
        },
        {
          "name": "shadowRootOptions",
          "type": "ShadowRootInit"
        },
        {
          "name": "raised",
          "type": "boolean"
        },
        {
          "name": "unelevated",
          "type": "boolean"
        },
        {
          "name": "outlined",
          "type": "boolean"
        },
        {
          "name": "dense",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "trailingIcon",
          "type": "boolean"
        },
        {
          "name": "fullwidth",
          "type": "boolean"
        },
        {
          "name": "icon",
          "attribute": "icon",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "label",
          "type": "string"
        },
        {
          "name": "expandContent",
          "type": "boolean"
        },
        {
          "name": "buttonElement",
          "type": "HTMLElement"
        },
        {
          "name": "ripple",
          "type": "Promise<Ripple | null>"
        }
      ]
    },
    {
      "name": "fwc-checkbox",
      "path": "./../packages/checkbox/src/index.ts",
      "properties": [
        {
          "name": "styles",
          "type": "CSSResult[]",
          "default": "[\"mdcStyle\",\"style\"]"
        },
        {
          "name": "checked",
          "type": "boolean"
        },
        {
          "name": "indeterminate",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "name",
          "type": "string | undefined"
        },
        {
          "name": "value",
          "type": "string"
        },
        {
          "name": "ariaLabel",
          "type": "string | undefined"
        },
        {
          "name": "ariaLabelledBy",
          "type": "string | undefined"
        },
        {
          "name": "ariaDescribedBy",
          "type": "string | undefined"
        },
        {
          "name": "reducedTouchTarget",
          "description": "Touch target extends beyond visual boundary of a component by default.\nSet to `true` to remove touch target added to the component.",
          "type": "boolean"
        },
        {
          "name": "isRippleActive"
        },
        {
          "name": "shadowRootOptions",
          "type": "ShadowRootInit"
        },
        {
          "name": "ripple",
          "description": "Implement ripple getter for Ripple integration with mwc-formfield",
          "type": "Promise<Ripple | null>"
        }
      ]
    },
    {
      "name": "fwc-daterange",
      "path": "./../packages/date/src/daterange/index.ts",
      "attributes": [
        {
          "name": "suffix",
          "type": "boolean | undefined",
          "default": "\"undefined\""
        },
        {
          "name": "from",
          "type": "Date",
          "default": "\"new Date()\""
        },
        {
          "name": "to",
          "type": "Date | undefined"
        },
        {
          "name": "seconds",
          "type": "boolean | undefined",
          "default": "\"undefined\""
        },
        {
          "name": "locale",
          "type": "string",
          "default": "\"code\""
        },
        {
          "name": "variant",
          "type": "DateRangeVariant",
          "default": "\"datetime\""
        },
        {
          "name": "weekstart",
          "type": "WeekDay",
          "default": "1"
        },
        {
          "name": "format",
          "type": "string | undefined",
          "default": "\"undefined\""
        },
        {
          "name": "capitalize",
          "type": "boolean | undefined",
          "default": "\"undefined\""
        }
      ],
      "properties": [
        {
          "name": "suffix",
          "attribute": "suffix",
          "type": "boolean | undefined",
          "default": "\"undefined\""
        },
        {
          "name": "from",
          "attribute": "from",
          "type": "Date",
          "default": "\"new Date()\""
        },
        {
          "name": "to",
          "attribute": "to",
          "type": "Date | undefined"
        },
        {
          "name": "seconds",
          "attribute": "seconds",
          "type": "boolean | undefined",
          "default": "\"undefined\""
        },
        {
          "name": "locale",
          "attribute": "locale",
          "type": "string",
          "default": "\"code\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "type": "DateRangeVariant",
          "default": "\"datetime\""
        },
        {
          "name": "weekstart",
          "attribute": "weekstart",
          "type": "WeekDay",
          "default": "1"
        },
        {
          "name": "format",
          "attribute": "format",
          "type": "string | undefined",
          "default": "\"undefined\""
        },
        {
          "name": "capitalize",
          "attribute": "capitalize",
          "type": "boolean | undefined",
          "default": "\"undefined\""
        },
        {
          "name": "Locale",
          "type": "Locale"
        },
        {
          "name": "Distance",
          "type": "string"
        },
        {
          "name": "Relative",
          "type": "string"
        }
      ]
    },
    {
      "name": "fwc-datetime",
      "path": "./../packages/date/src/datetime/index.ts",
      "attributes": [
        {
          "name": "date",
          "type": "Date",
          "default": "\"new Date()\""
        },
        {
          "name": "format",
          "type": "DateTimeFormat | undefined"
        },
        {
          "name": "locale",
          "type": "string",
          "default": "\"code\""
        }
      ],
      "properties": [
        {
          "name": "date",
          "attribute": "date",
          "type": "Date",
          "default": "\"new Date()\""
        },
        {
          "name": "format",
          "attribute": "format",
          "type": "DateTimeFormat | undefined"
        },
        {
          "name": "locale",
          "attribute": "locale",
          "type": "string",
          "default": "\"code\""
        },
        {
          "name": "formatted",
          "type": "string"
        }
      ]
    },
    {
      "name": "fwc-formfield",
      "path": "./../packages/formfield/src/index.ts",
      "properties": [
        {
          "name": "styles",
          "type": "CSSResult[]",
          "default": "[\"mdcStyle\",\"style\"]"
        },
        {
          "name": "alignEnd",
          "type": "boolean"
        },
        {
          "name": "spaceBetween",
          "type": "boolean"
        },
        {
          "name": "nowrap",
          "type": "boolean"
        },
        {
          "name": "label",
          "type": "string"
        }
      ]
    },
    {
      "name": "fwc-icon",
      "path": "./../packages/icon/src/index.ts",
      "attributes": [
        {
          "name": "icon",
          "type": "string"
        },
        {
          "name": "type",
          "type": "IconType | undefined"
        }
      ],
      "properties": [
        {
          "name": "styles",
          "type": "CSSResult[]",
          "default": "[\"style\"]"
        },
        {
          "name": "icon",
          "attribute": "icon",
          "type": "string"
        },
        {
          "name": "type",
          "attribute": "type",
          "type": "IconType | undefined"
        }
      ]
    },
    {
      "name": "cwc-intersection",
      "path": "./../packages/intersection/src/element.ts",
      "description": "Custom element for registering intersections",
      "attributes": [
        {
          "name": "disabled",
          "description": "Enable or disable element",
          "type": "boolean | undefined"
        },
        {
          "name": "once",
          "description": "Only observe first intersection",
          "type": "boolean | undefined"
        },
        {
          "name": "margin",
          "description": "Margin for intersection ([ <length> | <percentage> | auto ]{1,4})",
          "type": "string | undefined"
        },
        {
          "name": "threshold",
          "description": "Threshold which trigger intersection ([ <number>, ... ]{1,?})\nComman seperated string value.",
          "type": "number | number[] | undefined"
        }
      ],
      "properties": [
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "Enable or disable element",
          "type": "boolean | undefined"
        },
        {
          "name": "once",
          "attribute": "once",
          "description": "Only observe first intersection",
          "type": "boolean | undefined"
        },
        {
          "name": "margin",
          "attribute": "margin",
          "description": "Margin for intersection ([ <length> | <percentage> | auto ]{1,4})",
          "type": "string | undefined"
        },
        {
          "name": "threshold",
          "attribute": "threshold",
          "description": "Threshold which trigger intersection ([ <number>, ... ]{1,?})\nComman seperated string value.",
          "type": "number | number[] | undefined"
        },
        {
          "name": "observer",
          "type": "IntersectionObserver | undefined"
        },
        {
          "name": "intersected",
          "description": "Intersection state.",
          "type": "boolean"
        },
        {
          "name": "options",
          "description": "Intersection options",
          "type": "IntersectionObserverInit"
        }
      ]
    },
    {
      "name": "fwc-intersection",
      "path": "./../packages/intersection/src/index.ts",
      "attributes": [
        {
          "name": "disabled",
          "description": "Enable or disable element",
          "type": "boolean | undefined"
        },
        {
          "name": "once",
          "description": "Only observe first intersection",
          "type": "boolean | undefined"
        },
        {
          "name": "margin",
          "description": "Margin for intersection ([ <length> | <percentage> | auto ]{1,4})",
          "type": "string | undefined"
        },
        {
          "name": "threshold",
          "description": "Threshold which trigger intersection ([ <number>, ... ]{1,?})\nComman seperated string value.",
          "type": "number | number[] | undefined"
        }
      ],
      "properties": [
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "Enable or disable element",
          "type": "boolean | undefined"
        },
        {
          "name": "once",
          "attribute": "once",
          "description": "Only observe first intersection",
          "type": "boolean | undefined"
        },
        {
          "name": "margin",
          "attribute": "margin",
          "description": "Margin for intersection ([ <length> | <percentage> | auto ]{1,4})",
          "type": "string | undefined"
        },
        {
          "name": "threshold",
          "attribute": "threshold",
          "description": "Threshold which trigger intersection ([ <number>, ... ]{1,?})\nComman seperated string value.",
          "type": "number | number[] | undefined"
        },
        {
          "name": "observer",
          "type": "IntersectionObserver | undefined"
        },
        {
          "name": "intersected",
          "description": "Intersection state.",
          "type": "boolean"
        },
        {
          "name": "options",
          "description": "Intersection options",
          "type": "IntersectionObserverInit"
        }
      ]
    },
    {
      "name": "fwc-picture",
      "path": "./../packages/picture/src/index.ts",
      "attributes": [
        {
          "name": "src",
          "description": "Set the picture source\nThis will be updated if <source> is provided\nUse of a data-URI for src is encouraged for instant rendering.",
          "type": "string",
          "default": "\"//:0\""
        },
        {
          "name": "position",
          "description": "position of image",
          "type": "PictureAlignment",
          "default": "\"center\""
        },
        {
          "name": "cover",
          "description": "Toggle between cover and contain",
          "type": "boolean | undefined"
        },
        {
          "name": "lazy",
          "description": "When tag is applied the picure does not load resources until intersected",
          "type": "boolean | undefined"
        }
      ],
      "properties": [
        {
          "name": "styles",
          "type": "CSSResult[]",
          "default": "[\"style\"]"
        },
        {
          "name": "src",
          "attribute": "src",
          "description": "Set the picture source\nThis will be updated if <source> is provided\nUse of a data-URI for src is encouraged for instant rendering.",
          "type": "string",
          "default": "\"//:0\""
        },
        {
          "name": "position",
          "attribute": "position",
          "description": "position of image",
          "type": "PictureAlignment",
          "default": "\"center\""
        },
        {
          "name": "cover",
          "attribute": "cover",
          "description": "Toggle between cover and contain",
          "type": "boolean | undefined"
        },
        {
          "name": "lazy",
          "attribute": "lazy",
          "description": "When tag is applied the picure does not load resources until intersected",
          "type": "boolean | undefined"
        },
        {
          "name": "currentSrc",
          "description": "Set the picture height\nUpdated with the img natural height when loaded",
          "type": "string | undefined"
        },
        {
          "name": "height",
          "description": "Set the picture height\nUpdated with the img natural height when loaded",
          "type": "number | undefined"
        },
        {
          "name": "width",
          "description": "Set the picture width\nUpdated with the img natural width when loaded",
          "type": "number | undefined"
        },
        {
          "name": "intersected",
          "description": "indicate if picture is intersected",
          "type": "boolean | undefined"
        },
        {
          "name": "srcSets",
          "description": "Return the current source sets\nSince [[HTMLPictureElement]] is not slottable, [[HTMLSourceElement]] provided\nby light dom is moved inside the shadow.",
          "type": "HTMLSourceElement[]"
        },
        {
          "name": "loaded",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "fwc-popover",
      "path": "./../packages/popover/src/index.ts",
      "description": "Element wrapper for PopperJS",
      "attributes": [
        {
          "name": "placement",
          "type": "Placement",
          "default": "\"auto\""
        },
        {
          "name": "disabled",
          "type": "boolean | undefined"
        },
        {
          "name": "show",
          "type": "boolean | undefined"
        },
        {
          "name": "flip",
          "type": "boolean | undefined"
        },
        {
          "name": "offset",
          "type": "[number, number] | undefined"
        },
        {
          "name": "triggers",
          "type": "ShowTrigger[]",
          "default": "[]"
        }
      ],
      "properties": [
        {
          "name": "styles",
          "type": "CSSResult[]",
          "default": "[\"style\"]"
        },
        {
          "name": "placement",
          "attribute": "placement",
          "type": "Placement",
          "default": "\"auto\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean | undefined"
        },
        {
          "name": "show",
          "attribute": "show",
          "type": "boolean | undefined"
        },
        {
          "name": "flip",
          "attribute": "flip",
          "type": "boolean | undefined"
        },
        {
          "name": "offset",
          "attribute": "offset",
          "type": "[number, number] | undefined"
        },
        {
          "name": "triggers",
          "attribute": "triggers",
          "type": "ShowTrigger[]",
          "default": "[]"
        },
        {
          "name": "popper",
          "type": "Promise<HTMLSpanElement>"
        },
        {
          "name": "options",
          "type": "Options<StrictModifiers>"
        },
        {
          "name": "modifiers",
          "description": "Set popper modifiers for element",
          "type": "Partial<Modifier<any, any>>[]"
        }
      ]
    },
    {
      "name": "fwc-radio",
      "path": "./../packages/radio/src/index.ts",
      "properties": [
        {
          "name": "styles",
          "type": "CSSResult[]",
          "default": "[\"mdcStyle\",\"style\"]"
        },
        {
          "name": "global",
          "type": "boolean"
        },
        {
          "name": "checked",
          "description": "We define our own getter/setter for `checked` because we need to track\nchanges to it synchronously.\n\nThe order in which the `checked` property is set across radio buttons\nwithin the same group is very important. However, we can't rely on\nUpdatingElement's `updated` callback to observe these changes (which is\nalso what the `@observer` decorator uses), because it batches changes to\nall properties.\n\nConsider:\n\n   radio1.disabled = true;\n   radio2.checked = true;\n   radio1.checked = true;\n\nIn this case we'd first see all changes for radio1, and then for radio2,\nand we couldn't tell that radio1 was the most recently checked.",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "value",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "reducedTouchTarget",
          "description": "Touch target extends beyond visual boundary of a component by default.\nSet to `true` to remove touch target added to the component.",
          "type": "boolean"
        },
        {
          "name": "formElementTabIndex",
          "description": "input's tabindex is updated based on checked status.\nTab navigation will be removed from unchecked radios.",
          "type": "number"
        },
        {
          "name": "ariaLabel",
          "type": "string | undefined"
        },
        {
          "name": "ariaLabelledBy",
          "type": "string | undefined"
        },
        {
          "name": "isRippleActive"
        },
        {
          "name": "shadowRootOptions",
          "type": "ShadowRootInit"
        },
        {
          "name": "ripple",
          "description": "Implement ripple getter for Ripple integration with mwc-formfield",
          "type": "Promise<Ripple | null>"
        }
      ],
      "events": [
        {
          "name": "checked"
        }
      ]
    },
    {
      "name": "fwc-switch",
      "path": "./../packages/switch/src/index.ts",
      "properties": [
        {
          "name": "styles",
          "type": "CSSResult[]",
          "default": "[\"mdcStyle\",\"style\"]"
        },
        {
          "name": "checked",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "ariaLabel",
          "type": "string | undefined"
        },
        {
          "name": "ariaLabelledBy",
          "type": "string | undefined"
        },
        {
          "name": "shadowRootOptions",
          "type": "ShadowRootInit"
        },
        {
          "name": "ripple",
          "description": "Implement ripple getter for Ripple integration with mwc-formfield",
          "type": "Promise<Ripple | null>"
        }
      ]
    },
    {
      "name": "fwc-textarea",
      "path": "./../packages/textarea/src/index.ts",
      "properties": [
        {
          "name": "styles",
          "type": "CSSResult[]",
          "default": "[\"mdcStyle\",\"mdcTextInputStyle\",\"fwcTextInputStyle\",\"elementStyle\"]"
        },
        {
          "name": "rows",
          "type": "number"
        },
        {
          "name": "cols",
          "type": "number"
        },
        {
          "name": "value",
          "type": "string"
        },
        {
          "name": "type",
          "type": "TextFieldType"
        },
        {
          "name": "placeholder",
          "type": "string"
        },
        {
          "name": "label",
          "type": "string"
        },
        {
          "name": "icon",
          "type": "string"
        },
        {
          "name": "iconTrailing",
          "type": "string"
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "required",
          "type": "boolean"
        },
        {
          "name": "minLength",
          "type": "number"
        },
        {
          "name": "maxLength",
          "type": "number"
        },
        {
          "name": "outlined",
          "type": "boolean"
        },
        {
          "name": "helper",
          "type": "string"
        },
        {
          "name": "validateOnInitialRender",
          "type": "boolean"
        },
        {
          "name": "validationMessage",
          "type": "string"
        },
        {
          "name": "autoValidate",
          "type": "boolean"
        },
        {
          "name": "pattern",
          "type": "string"
        },
        {
          "name": "min",
          "type": "string | number"
        },
        {
          "name": "max",
          "type": "string | number"
        },
        {
          "name": "step",
          "type": "number | null"
        },
        {
          "name": "size",
          "type": "number | null"
        },
        {
          "name": "helperPersistent",
          "type": "boolean"
        },
        {
          "name": "charCounter",
          "type": "boolean | \"external\" | \"internal\""
        },
        {
          "name": "endAligned",
          "type": "boolean"
        },
        {
          "name": "prefix",
          "type": "string"
        },
        {
          "name": "suffix",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "inputMode",
          "type": "TextFieldInputMode"
        },
        {
          "name": "readOnly",
          "type": "boolean"
        },
        {
          "name": "autocapitalize",
          "type": "string"
        },
        {
          "name": "validity",
          "type": "ValidityState"
        },
        {
          "name": "willValidate",
          "type": "boolean"
        },
        {
          "name": "selectionStart",
          "type": "number | null"
        },
        {
          "name": "selectionEnd",
          "type": "number | null"
        },
        {
          "name": "validityTransform",
          "type": "((value: string, nativeValidity: ValidityState) => Partial<ValidityState>) | null"
        },
        {
          "name": "shadowRootOptions",
          "type": "ShadowRootInit"
        },
        {
          "name": "ripple",
          "description": "Implement ripple getter for Ripple integration with mwc-formfield",
          "type": "Promise<RippleInterface | null> | undefined"
        }
      ]
    },
    {
      "name": "fwc-textinput",
      "path": "./../packages/textinput/src/index.ts",
      "attributes": [
        {
          "name": "variant",
          "type": "TextInputVariant",
          "default": "\"filled\""
        },
        {
          "name": "icon",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "iconTrailing",
          "type": "string",
          "default": "\"\""
        }
      ],
      "properties": [
        {
          "name": "styles",
          "type": "CSSResult[]",
          "default": "[\"mdcStyle\",\"elementStyle\"]"
        },
        {
          "name": "variant",
          "attribute": "variant",
          "type": "TextInputVariant",
          "default": "\"filled\""
        },
        {
          "name": "value",
          "type": "string"
        },
        {
          "name": "type",
          "type": "TextFieldType"
        },
        {
          "name": "placeholder",
          "type": "string"
        },
        {
          "name": "label",
          "type": "string"
        },
        {
          "name": "icon",
          "attribute": "icon",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "iconTrailing",
          "attribute": "iconTrailing",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "required",
          "type": "boolean"
        },
        {
          "name": "minLength",
          "type": "number"
        },
        {
          "name": "maxLength",
          "type": "number"
        },
        {
          "name": "outlined",
          "type": "boolean"
        },
        {
          "name": "helper",
          "type": "string"
        },
        {
          "name": "validateOnInitialRender",
          "type": "boolean"
        },
        {
          "name": "validationMessage",
          "type": "string"
        },
        {
          "name": "autoValidate",
          "type": "boolean"
        },
        {
          "name": "pattern",
          "type": "string"
        },
        {
          "name": "min",
          "type": "string | number"
        },
        {
          "name": "max",
          "type": "string | number"
        },
        {
          "name": "step",
          "type": "number | null"
        },
        {
          "name": "size",
          "type": "number | null"
        },
        {
          "name": "helperPersistent",
          "type": "boolean"
        },
        {
          "name": "charCounter",
          "type": "boolean | \"external\" | \"internal\""
        },
        {
          "name": "endAligned",
          "type": "boolean"
        },
        {
          "name": "prefix",
          "type": "string"
        },
        {
          "name": "suffix",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "inputMode",
          "type": "TextFieldInputMode"
        },
        {
          "name": "readOnly",
          "type": "boolean"
        },
        {
          "name": "autocapitalize",
          "type": "string"
        },
        {
          "name": "validity",
          "type": "ValidityState"
        },
        {
          "name": "willValidate",
          "type": "boolean"
        },
        {
          "name": "selectionStart",
          "type": "number | null"
        },
        {
          "name": "selectionEnd",
          "type": "number | null"
        },
        {
          "name": "validityTransform",
          "type": "((value: string, nativeValidity: ValidityState) => Partial<ValidityState>) | null"
        },
        {
          "name": "shadowRootOptions",
          "type": "ShadowRootInit"
        },
        {
          "name": "ripple",
          "description": "Implement ripple getter for Ripple integration with mwc-formfield",
          "type": "Promise<RippleInterface | null> | undefined"
        }
      ]
    },
    {
      "name": "fwc-theme",
      "path": "./../packages/theme/src/index.ts"
    }
  ]
}